[{"/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/index.js":"1","/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/Login.js":"2","/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/Home.js":"3","/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/auth.js":"4","/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/SignUpCharity.js":"5","/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/SignUpDonor.js":"6"},{"size":1105,"mtime":1649448992507,"results":"7","hashOfConfig":"8"},{"size":2408,"mtime":1649449069145,"results":"9","hashOfConfig":"8"},{"size":343,"mtime":1649448929345,"results":"10","hashOfConfig":"8"},{"size":305,"mtime":1648996690000,"results":"11","hashOfConfig":"8"},{"size":3727,"mtime":1649462382658,"results":"12","hashOfConfig":"8"},{"size":3721,"mtime":1649462397937,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"vqq9gy",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/index.js",[],[],["36","37"],"/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/Login.js",["38"],[],"\nimport {Form, Button, Card} from 'react-bootstrap'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {useForm} from 'react-hook-form'\nimport {login} from '../auth'\n\n\n\nconst Login=()=>{\n\n\n    \n    //const [logged] = useAuth();\n    const {register,handleSubmit,reset,formState:{errors}}=useForm()\n    const navigate = useNavigate()\n    \n\n    const userLogin=(data)=>{\n       console.log(data)\n\n       const requestOptions={\n           method:\"POST\",\n           headers:{\n               'content-type':'application/json'\n           },\n           body:JSON.stringify(data)\n       }\n        \n       fetch('/auth/login',requestOptions)\n       .then(res=>res.json())\n       .then(data=>{\n           console.log(data.access_token)\n           \n           if (data.access_token){\n\n            console.log(\"access token is\", data.access_token)\n\n            login(data.access_token)\n            \n            navigate('/')\n\n           }\n           else{\n               alert('Invalid username or password')\n           }\n\n\n       })\n\n\n\n       reset()\n    }\n  return (\n    <Card>\n        <Card.Body>\n            <h2 className = \"text-center mb-4 \"> Login</h2>\n            <Form>\n                <Form.Group id = \"email\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control \n                    type = \"username\" \n                    placeholder='username' \n                    {...register('username',{required:true})}\n                    />\n                </Form.Group>\n\n                <Form.Group id = \"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control \n                    type = \"password\" \n                    placeholder='Password' \n                    {...register('password',{required:true})}\n                    required/>\n                </Form.Group>\n                <br/>\n                <Form.Group>\n                    <small>Do not have an account? <Link to='/signupdonor'>Create an account as Donor</Link></small>\n                    <br></br>\n                    <small>Do not have an account? <Link to='/signupcharity'>Create an account as Charity</Link></small>\n                </Form.Group>\n                <br/>\n\n\n                <Button onClick={handleSubmit(userLogin)} className = \"w-100\" type  = \"submit\">Login</Button>\n            </Form>\n        </Card.Body>\n    </Card>\n  )\n}\n\nexport default Login","/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/Home.js",[],[],"/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/auth.js",[],[],"/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/SignUpCharity.js",["39","40"],[],"import React, { useState } from 'react'\nimport { Card, Form, Button, Alert } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useForm } from 'react-hook-form'\n\n\nconst SignUpCharity = () => {\n\n\n    const { register, handleSubmit, reset, formState: { errors } } = useForm();\n    const [show,setShow]=useState(false)\n    const [serverResponse,setServerResponse]=useState('')\n\n    const submitForm = (data) => {\n\n        console.log(data)\n\n\n        if (data.password === data.confirmpassword) {\n\n\n            const body = {\n                username: data.username,\n                email: data.email,\n                password: data.password\n            }\n\n            const requestOptions = {\n                method: \"POST\",\n                headers: {\n                    'content-type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            }\n\n\n            fetch('/auth/signupcharity', requestOptions)\n                .then(res => res.json())\n                .then(data =>{\n                    console.log(data)\n                    setServerResponse(data.message)\n                    setShow(true)\n                })\n                .catch(err => console.log(err))\n\n            reset()\n        }\n\n        else {\n            alert(\"Passwords do not match\")\n        }\n\n\n    } \n\n  return (\n\n    <>\n    <Alert variant=\"success\" onClose={() => {setShow(false)\n                }} dismissible>\n        <p>\n            {serverResponse}\n        </p>\n    </Alert>\n\n  \n\n    <Card>\n        <Card.Body>\n            <h2 className = \"text-center mb-4 \"> Sign Up</h2>\n            <Form>\n                <Form.Group id = \"username\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control \n                    type = \"username\" \n                    placeholder='username'  \n                    \n                    name = \"username\" \n                    {...register(\"username\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n                <Form.Group id = \"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control \n                    type = \"email\" \n                    placeholder='Email'  \n                    \n                    name = \"email\" \n                    {...register(\"email\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n\n                <Form.Group id = \"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control \n                    type = \"password\" \n                    placeholder='Password'  \n                      \n                    name = \"password\"\n                    {...register(\"password\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n\n                <Form.Group id = \"passwordconfirm\">\n                    <Form.Label>Password Confirmation</Form.Label>\n                    <Form.Control \n                    type = \"password\" \n                    placeholder=' Confirm Password'  \n                     \n                    name = \"confirmpassword\" \n                    {...register(\"confirmpassword\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n                <br/>\n                <Button onClick = {handleSubmit(submitForm)} className = \"w-100\" type  = \"submit\" >Sign Up</Button>\n            </Form>\n        </Card.Body>\n    </Card>\n\n    <div className = \"w-100 text-center mt-2\">\n        Already have an account? <Link to=\"/login\">Log In</Link>\n    </div>\n\n    \n    </>\n    \n  )\n}\n\nexport default SignUpCharity","/Users/abenezermolla/Documents/GitHub/demoapp/frontend/abenFrontend/src/Components/SignUpDonor.js",["41","42"],[],"import React, { useState } from 'react'\nimport { Card, Form, Button, Alert } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport { useForm } from 'react-hook-form'\n\n\nconst SignUpDonor = () => {\n\n\n    const { register, handleSubmit, reset, formState: { errors } } = useForm();\n    const [show,setShow]=useState(false)\n    const [serverResponse,setServerResponse]=useState('')\n\n    const submitForm = (data) => {\n\n        console.log(data)\n\n\n        if (data.password === data.confirmpassword) {\n\n\n            const body = {\n                username: data.username,\n                email: data.email,\n                password: data.password\n            }\n\n            const requestOptions = {\n                method: \"POST\",\n                headers: {\n                    'content-type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            }\n\n\n            fetch('/auth/signupdonor', requestOptions)\n                .then(res => res.json())\n                .then(data =>{\n                    console.log(data)\n                    setServerResponse(data.message)\n                    setShow(true)\n                })\n                .catch(err => console.log(err))\n\n            reset()\n        }\n\n        else {\n            alert(\"Passwords do not match\")\n        }\n\n\n    } \n\n  return (\n\n    <>\n    <Alert variant=\"success\" onClose={() => {setShow(false)\n                }} dismissible>\n        <p>\n            {serverResponse}\n        </p>\n    </Alert>\n\n  \n\n    <Card>\n        <Card.Body>\n            <h2 className = \"text-center mb-4 \"> Sign Up</h2>\n            <Form>\n                <Form.Group id = \"username\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control \n                    type = \"username\" \n                    placeholder='username'  \n                    \n                    name = \"username\" \n                    {...register(\"username\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n                <Form.Group id = \"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control \n                    type = \"email\" \n                    placeholder='Email'  \n                    \n                    name = \"email\" \n                    {...register(\"email\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n\n                <Form.Group id = \"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control \n                    type = \"password\" \n                    placeholder='Password'  \n                      \n                    name = \"password\"\n                    {...register(\"password\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n\n                <Form.Group id = \"passwordconfirm\">\n                    <Form.Label>Password Confirmation</Form.Label>\n                    <Form.Control \n                    type = \"password\" \n                    placeholder=' Confirm Password'  \n                     \n                    name = \"confirmpassword\" \n                    {...register(\"confirmpassword\", { required: true})}\n                    required\n                    />\n                </Form.Group>\n                <br/>\n                <Button onClick = {handleSubmit(submitForm)} className = \"w-100\" type  = \"submit\" >Sign Up</Button>\n            </Form>\n        </Card.Body>\n    </Card>\n\n    <div className = \"w-100 text-center mt-2\">\n        Already have an account? <Link to=\"/login\">Log In</Link>\n    </div>\n\n    \n    </>\n    \n  )\n}\n\nexport default SignUpDonor",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":14,"column":51,"nodeType":"49","messageId":"50","endLine":14,"endColumn":57},{"ruleId":"47","severity":1,"message":"48","line":10,"column":57,"nodeType":"49","messageId":"50","endLine":10,"endColumn":63},{"ruleId":"47","severity":1,"message":"51","line":11,"column":12,"nodeType":"49","messageId":"50","endLine":11,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":10,"column":57,"nodeType":"49","messageId":"50","endLine":10,"endColumn":63},{"ruleId":"47","severity":1,"message":"51","line":11,"column":12,"nodeType":"49","messageId":"50","endLine":11,"endColumn":16},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'show' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]