{"ast":null,"code":"var _jsxFileName = \"/Users/abenezermolla/Documents/GitHub/SignUp_and_Login/auth-page/src/Components/Login.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Card } from 'react-bootstrap';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { createAuthProvider } from 'react-token-auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const login = createAuthProvider({\n    accessTokenKey: 'access_token',\n    onUpdateToken: token => fetch('/auth/refresh', {\n      method: 'POST',\n      body: token.refresh_token\n    }).then(r => r.json())\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const navigate = useNavigate();\n\n  const userLogin = data => {\n    console.log(data);\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    };\n    fetch('/auth/login', requestOptions).then(res => res.json()).then(data => {\n      console.log(data.access_token);\n\n      if (data) {\n        login(data.access_token);\n        navigate('/');\n      } else {\n        alert('Invalid username or password');\n      }\n    });\n    reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 \",\n        children: \" Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          id: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Email\",\n            name: \"email\",\n            r: true,\n            ...register('email', {\n              required: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          id: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Password\",\n            name: \"password\",\n            ...register('password', {\n              required: true\n            }),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Do not have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/signup\",\n              children: \"Create an account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 52\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit(userLogin),\n          className: \"w-100\",\n          type: \"submit\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Login, \"q1ndo4o1MzxiU4QYdYovzeUAVQQ=\", false, function () {\n  return [useForm, useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/abenezermolla/Documents/GitHub/SignUp_and_Login/auth-page/src/Components/Login.js"],"names":["Form","Button","Card","Link","useNavigate","useForm","createAuthProvider","Login","login","accessTokenKey","onUpdateToken","token","fetch","method","body","refresh_token","then","r","json","register","handleSubmit","reset","formState","errors","navigate","userLogin","data","console","log","requestOptions","headers","JSON","stringify","res","access_token","alert","required"],"mappings":"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","sourcesContent":["\nimport {Form, Button, Card} from 'react-bootstrap'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {useForm} from 'react-hook-form'\nimport {createAuthProvider} from 'react-token-auth'\n\n\n\nconst Login=()=>{\n\n\n    const login =\n    createAuthProvider({\n        accessTokenKey: 'access_token',\n        onUpdateToken: (token) => fetch('/auth/refresh', {\n            method: 'POST',\n            body: token.refresh_token\n        })\n        .then(r => r.json())\n    })\n\n    \n    \n    const {register,handleSubmit,reset,formState:{errors}}=useForm()\n\n    const navigate = useNavigate()\n    \n\n\n    const userLogin=(data)=>{\n       console.log(data)\n\n       const requestOptions={\n           method:\"POST\",\n           headers:{\n               'content-type':'application/json'\n           },\n           body:JSON.stringify(data)\n       }\n        \n       fetch('/auth/login',requestOptions)\n       .then(res=>res.json())\n       .then(data=>{\n           console.log(data.access_token)\n           \n           if (data){\n\n            login(data.access_token)\n            navigate('/')\n           }\n           else{\n               alert('Invalid username or password')\n           }\n\n\n       })\n\n\n\n       reset()\n    }\n  return (\n<Card>\n        <Card.Body>\n            <h2 className = \"text-center mb-4 \"> Sign Up</h2>\n            <Form>\n                <Form.Group id = \"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control \n                    type = \"email\" \n                    placeholder='Email' \n                    \n                    name = \"email\"  r\n                    {...register('email',{required:true})}\n                    />\n                </Form.Group>\n\n                <Form.Group id = \"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control \n                    type = \"password\" \n                    placeholder='Password' \n                    \n                    name = \"password\" \n                    {...register('password',{required:true})}\n                    required/>\n                </Form.Group>\n                <br/>\n                <Form.Group>\n                    <small>Do not have an account? <Link to='/signup'>Create an account</Link></small>\n                </Form.Group>\n                <br/>\n\n\n                <Button onClick={handleSubmit(userLogin)} className = \"w-100\" type  = \"submit\">Login</Button>\n            </Form>\n        </Card.Body>\n    </Card>\n  )\n}\n\nexport default Login"]},"metadata":{},"sourceType":"module"}